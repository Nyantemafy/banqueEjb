using CompteDepot.Simple.Data;
using CompteDepot.Simple.Models;
using Microsoft.EntityFrameworkCore;

namespace CompteDepot.Simple.Services
{
    public class CompteDepotService : ICompteDepotService
    {
        public decimal ConsulterSolde(string numeroCompte)
        {
            Console.WriteLine($"üîç Consultation solde CompteDepot : {numeroCompte}");
            
            using var context = new BanqueContext();
            var compte = context.ComptesDepot.FirstOrDefault(c => c.NumeroCompte == numeroCompte);
            
            if (compte == null)
            {
                Console.WriteLine("‚ùå Compte de d√©p√¥t non trouv√©");
                return 0;
            }
            
            Console.WriteLine($"‚úÖ Solde trouv√© : {compte.Solde:C}");
            return compte.Solde;
        }
        
        public bool CreerCompte(string numeroCompte, string proprietaire, decimal tauxInteret)
        {
            Console.WriteLine($"üÜï Cr√©ation CompteDepot {numeroCompte} pour {proprietaire}");
            
            using var context = new BanqueContext();
            
            // V√©rifier si existe d√©j√†
            if (context.ComptesDepot.Any(c => c.NumeroCompte == numeroCompte))
            {
                Console.WriteLine("‚ùå Compte d√©j√† existant");
                return false;
            }
            
            // Cr√©er le compte (dur√©e par d√©faut 12 mois)
            var compte = new CompteDepot.Simple.Models.CompteDepot
            {
                NumeroCompte = numeroCompte,
                Proprietaire = proprietaire,
                TauxInteret = tauxInteret,
                DateCreation = DateTime.Now,
                DateEcheance = DateTime.Now.AddMonths(12),
                Solde = 0
            };
            
            context.ComptesDepot.Add(compte);
            context.SaveChanges();
            
            Console.WriteLine($"‚úÖ CompteDepot cr√©√© avec taux {tauxInteret}%");
            return true;
        }
        
        public bool Deposer(string numeroCompte, decimal montant)
        {
            Console.WriteLine($"üí∞ D√©p√¥t CompteDepot de {montant:C} sur {numeroCompte}");
            
            if (montant <= 0)
            {
                Console.WriteLine("‚ùå Montant invalide");
                return false;
            }
            
            using var context = new BanqueContext();
            var compte = context.ComptesDepot.FirstOrDefault(c => c.NumeroCompte == numeroCompte);
            
            if (compte == null)
            {
                Console.WriteLine("‚ùå Compte non trouv√©");
                return false;
            }
            
            // Ajouter l'argent
            compte.Solde += montant;
            
            // Enregistrer l'op√©ration
            var operation = new OperationDepot(numeroCompte, montant, "DEPOT", 
                                             $"D√©p√¥t de {montant:C}");
            context.Operations.Add(operation);
            
            context.SaveChanges();
            
            Console.WriteLine($"‚úÖ D√©p√¥t r√©ussi, nouveau solde : {compte.Solde:C}");
            return true;
        }
        
        public bool Retirer(string numeroCompte, decimal montant)
        {
            Console.WriteLine($"üí∏ Retrait CompteDepot de {montant:C} sur {numeroCompte}");
            
            if (montant <= 0)
            {
                Console.WriteLine("‚ùå Montant invalide");
                return false;
            }
            
            using var context = new BanqueContext();
            var compte = context.ComptesDepot.FirstOrDefault(c => c.NumeroCompte == numeroCompte);
            
            if (compte == null)
            {
                Console.WriteLine("‚ùå Compte non trouv√©");
                return false;
            }
            
            // V√©rifier les limites de retrait
            if (!compte.PeutRetirer(montant))
            {
                Console.WriteLine($"‚ùå Limites de retrait d√©pass√©es");
                Console.WriteLine($"   Limite mensuelle: {compte.Solde * 0.10m:C} (d√©j√† retir√©: {compte.MontantRetireMois:C})");
                Console.WriteLine($"   Limite annuelle: {compte.Solde * 0.50m:C} (d√©j√† retir√©: {compte.MontantRetireAnnee:C})");
                return false;
            }
            
            // Retirer l'argent
            compte.Solde -= montant;
            compte.MontantRetireMois += montant;
            compte.MontantRetireAnnee += montant;
            
            // Enregistrer l'op√©ration (montant n√©gatif)
            var operation = new OperationDepot(numeroCompte, -montant, "RETRAIT", 
                                             $"Retrait de {montant:C}");
            context.Operations.Add(operation);
            
            context.SaveChanges();
            
            Console.WriteLine($"‚úÖ Retrait r√©ussi, nouveau solde : {compte.Solde:C}");
            return true;
        }
        
        public decimal CalculerInterets(string numeroCompte)
        {
            Console.WriteLine($"üìä Calcul int√©r√™ts pour {numeroCompte}");
            
            using var context = new BanqueContext();
            var compte = context.ComptesDepot.FirstOrDefault(c => c.NumeroCompte == numeroCompte);
            
            if (compte == null)
            {
                Console.WriteLine("‚ùå Compte non trouv√©");
                return 0;
            }
            
            decimal interets = compte.CalculerInterets();
            Console.WriteLine($"‚úÖ Int√©r√™ts calcul√©s : {interets:C} (Taux: {compte.TauxInteret}%)");
            
            return interets;
        }
        
        public List<OperationDepot> GetHistorique(string numeroCompte)
        {
            Console.WriteLine($"üìã Historique CompteDepot pour {numeroCompte}");
            
            using var context = new BanqueContext();
            var operations = context.Operations
                .Where(o => o.NumeroCompte == numeroCompte)
                .OrderByDescending(o => o.DateOperation)
                .ToList();
            
            Console.WriteLine($"‚úÖ {operations.Count} op√©rations trouv√©es");
            return operations;
        }
    }
}